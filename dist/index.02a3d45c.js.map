{"mappings":"C,A,WCAA,0EAA0E;AAC1E,OAAO,gBAAgB,CAAC,OAAQ,KAC9B,0EAA0E;AAE1E,oBAAoB,EACpB,IAAM,EAAe,OAAO,UAAU,CACpC,sCACA,OAAO,CAGH,EAAU,SAAS,aAAa,CAAC,yBACvC,GAAS,aAAa,cAAe,CAAC,EAAE,EAAe,OAAS,QAAQ,CAAC,EAEzE,IAAI,CACN,EAGA;;CAEC,EACD,MAAM,EACJ,CAAC,CAAG,CAAG,wBAAwB,EAAI,SAAS,aAAa,CAAC,iBAAmB,AAE7E;;GAEC,EACD,aAAc,CACZ,IAAI,CAAC,CAAC,CAAG,CAAC,gBAAgB,CAAC,QAAS,IAAI,CAAC,CAAC,CAAsB,CAClE,CAEA;;;;GAIC,EACD,CAAC,CAAsB,CAAC,CAAM,EAC5B,IAAM,EAAc,EAAO,MAAM,CACjC,GAAI,CAAE,CAAA,aAAuB,WAAA,EAAc,MAE3C,sCAAqC,EACrC,IAAM,EAAS,EAAY,OAAO,CAAC,YACnC,GAAI,CAAC,EAAQ,MAEb,yIAAwI;AACxI,oBAAoB,EACpB,IAAM,EACJ,AAAyC,UAAzC,EAAO,YAAY,CAAC,iBAEtB,GAAQ,oBAAoB,aAAa,cAAe,CAAC,EAAE,CAAC,EAAW,CAAC,EACxE,GAAQ,aAAa,gBAAiB,CAAC,EAAE,EAAW,CAAC,CAErD,mCAAkC,EAClC,IAAM,EAAU,SAAS,aAAa,CAAC,YAEnC,GACF,GAAQ,oBAAoB,UAAU,IAAI,UAC1C,GAAS,UAAU,IAAI,YAEvB,GAAS,UAAU,OAAO,UAC1B,GAAQ,oBAAoB,UAAU,OAAO,UAEjD,CACF,C,G,4D","sources":["<anon>","src/js/main.js"],"sourcesContent":["(function () {\nvar $089c40fcbb903d20$exports = {};\n// We want to listen for the load event dispatched directly on the window.\nwindow.addEventListener(\"load\", ()=>{\n    // When the page loads we want to check if the user is on a mobile device.\n    /** @type {boolean} */ const mobileDevice = window.matchMedia(\"only screen and (max-width: 767px)\").matches;\n    /** @type {HTMLDivElement | null} */ const navMenu = document.querySelector(\"div[class='nav-menu']\");\n    navMenu?.setAttribute(\"aria-hidden\", `${mobileDevice ? \"true\" : \"false\"}`);\n    new $089c40fcbb903d20$var$NavigationComponent();\n});\n/**\n * Create a navigation component. \n */ class $089c40fcbb903d20$var$NavigationComponent {\n    #nav = /** @type {HTMLElement} */ document.querySelector(\".nav-container\");\n    /**\n   * Takes in no argument\n   */ constructor(){\n        this.#nav.addEventListener(\"click\", this.#handleMobileNavigation);\n    }\n    /**\n   *\n   * @param {Event} evtObj - The click event carried out by the user.\n   * @return {void}\n   */ #handleMobileNavigation(evtObj) {\n        const eventTarget = evtObj.target;\n        if (!(eventTarget instanceof HTMLElement)) return;\n        /** @type {HTMLButtonElement | null} */ const navBtn = eventTarget.closest(\".menuBtn\");\n        if (!navBtn) return;\n        // On mobile devices it is true that the menu is closed when the user clicks the device. So when that is the case what do we want to do.\n        /** @type {Boolean} */ const closedMenu = navBtn.getAttribute(\"aria-expanded\") === \"false\" || false;\n        navBtn?.nextElementSibling?.setAttribute(\"aria-hidden\", `${!closedMenu}`);\n        navBtn?.setAttribute(\"aria-expanded\", `${closedMenu}`);\n        /** @type {HTMLDivElement | null} */ const overlay = document.querySelector(\".overlay\");\n        if (closedMenu) {\n            navBtn?.nextElementSibling?.classList.add(\"active\");\n            overlay?.classList.add(\"active\");\n        } else {\n            overlay?.classList.remove(\"active\");\n            navBtn?.nextElementSibling?.classList.remove(\"active\");\n        }\n    }\n}\n\n})();\n//# sourceMappingURL=index.02a3d45c.js.map\n","// We want to listen for the load event dispatched directly on the window.\nwindow.addEventListener('load', () => {\n  // When the page loads we want to check if the user is on a mobile device.\n\n  /** @type {boolean} */\n  const mobileDevice = window.matchMedia(\n    'only screen and (max-width: 767px)'\n  ).matches;\n\n  /** @type {HTMLDivElement | null} */\n  const navMenu = document.querySelector('div[class=\\'nav-menu\\']');\n  navMenu?.setAttribute('aria-hidden', `${mobileDevice ? 'true' : 'false'}`);\n\n  new NavigationComponent();\n});\n\n\n/**\n * Create a navigation component. \n */\nclass NavigationComponent {\n  #nav = /** @type {HTMLElement} */ (document.querySelector('.nav-container'));\n\n  /**\n   * Takes in no argument\n   */\n  constructor() {\n    this.#nav.addEventListener('click', this.#handleMobileNavigation);\n  }\n\n  /**\n   *\n   * @param {Event} evtObj - The click event carried out by the user.\n   * @return {void}\n   */\n  #handleMobileNavigation(evtObj) {\n    const eventTarget = evtObj.target;\n    if (!(eventTarget instanceof HTMLElement)) return;\n\n    /** @type {HTMLButtonElement | null} */\n    const navBtn = eventTarget.closest('.menuBtn');\n    if (!navBtn) return;\n\n    // On mobile devices it is true that the menu is closed when the user clicks the device. So when that is the case what do we want to do.\n    /** @type {Boolean} */\n    const closedMenu =\n      navBtn.getAttribute('aria-expanded') === 'false' || false;\n\n    navBtn?.nextElementSibling?.setAttribute('aria-hidden', `${!closedMenu}`);\n    navBtn?.setAttribute('aria-expanded', `${closedMenu}`);\n\n    /** @type {HTMLDivElement | null} */\n    const overlay = document.querySelector('.overlay');\n\n    if (closedMenu) {\n      navBtn?.nextElementSibling?.classList.add('active');\n      overlay?.classList.add('active');\n    } else {\n      overlay?.classList.remove('active');\n      navBtn?.nextElementSibling?.classList.remove('active');\n    }\n  }\n}\n"],"names":["window","addEventListener","mobileDevice","matchMedia","matches","navMenu","document","querySelector","setAttribute","$089c40fcbb903d20$var$NavigationComponent","nav","constructor","handleMobileNavigation","evtObj","eventTarget","target","HTMLElement","navBtn","closest","closedMenu","getAttribute","nextElementSibling","overlay","classList","add","remove"],"version":3,"file":"index.02a3d45c.js.map"}